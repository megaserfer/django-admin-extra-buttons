{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"django-admin-extra-buttons","text":"<p>This is a full rewriting of the original <code>django-admin-extra-url</code>. It provides decorators to easily add custom buttons to Django Admin pages and/or add views to any ModelAdmin</p> <p>It allows easy creation of wizards, actions and/or links to external resources  as well as api only views.</p> <p>Three decorators are available: </p> <ul> <li><code>button()</code> to mark a method as extra view and show related button</li> <li><code>link()</code> This is used for \"external\" link, where you don't need to invoke local views.</li> <li><code>view()</code> View only decorator, this adds a new url but do not render any button.</li> <li><code>choice()</code> Menu like button, can be used to group multiple @views().</li> </ul>"},{"location":"#install","title":"Install","text":"<pre><code>pip install django-admin-extra-buttons\n</code></pre> <p>After installation add it to <code>INSTALLED_APPS</code></p> <pre><code>INSTALLED_APPS = (\n   ...\n   'admin_extra_buttons',\n)\n</code></pre>"},{"location":"#how-to-use-it","title":"How to use it","text":"<pre><code>\nfrom admin_extra_buttons.api import ExtraButtonsMixin, button, confirm_action, link, view\nfrom admin_extra_buttons.utils import HttpResponseRedirectToReferrer\nfrom django.http import HttpResponse, JsonResponse\nfrom django.contrib import admin\nfrom django.views.decorators.clickjacking import xframe_options_sameorigin\nfrom django.views.decorators.csrf import csrf_exempt\n\n\nclass MyModelModelAdmin(ExtraButtonsMixin, admin.ModelAdmin):\n\n    @button(permission='demo.add_demomodel1',\n            visible=lambda self: self.context[\"request\"].user.is_superuser,\n            change_form=True,\n            html_attrs={'style': 'background-color:#88FF88;color:black'})\n    def refresh(self, request):\n        self.message_user(request, 'refresh called')\n        # Optional: returns HttpResponse\n        return HttpResponseRedirectToReferrer(request)\n\n    @button(html_attrs={'style': 'background-color:#DC6C6C;color:black'})\n    def confirm(self, request):\n        def _action(request):\n            pass\n\n        return confirm_action(self, request, _action, \"Confirm action\",\n                              \"Successfully executed\", )\n\n    @link(href=None,\n          change_list=False,\n          html_attrs={'target': '_new', 'style': 'background-color:var(--button-bg)'})\n    def search_on_google(self, button):\n        original = button.context['original']\n        button.label = f\"Search '{original.name}' on Google\"\n        button.href = f\"https://www.google.com/?q={original.name}\"\n\n    @view()\n    def select2_autocomplete(self, request):\n        return JsonResponse({})\n\n    @view(http_basic_auth=True)\n    def api4(self, request):\n        return HttpResponse(\"Basic Authentication allowed\")\n\n    @view(decorators=[csrf_exempt, xframe_options_sameorigin])\n    def preview(self, request):\n        if request.method == \"POST\":\n            return HttpResponse(\"POST\")\n        return HttpResponse(\"GET\")\n\n\n</code></pre>"},{"location":"#project-links","title":"Project Links","text":"<ul> <li>Code: https://github.com/saxix/django-admin-extra-buttons</li> <li>Documentation: https://saxix.github.io/django-admin-extra-buttons/</li> <li>Issue Tracker: https://github.com/saxix/django-admin-extra-buttons/issues</li> <li>Download Package: https://pypi.org/project/django-admin-extra-buttons/</li> </ul>"},{"location":"howto/","title":"How To","text":""},{"location":"howto/#build-two-steps-action","title":"Build two steps action","text":"<p>This example shows how to create a button that display a form to upload a file and process it.</p> <p><code>admin_extra_buttons/upload.html</code></p> <pre><code>{% extends \"admin_extra_buttons/action_page.html\" %}\n{% load i18n static admin_list admin_urls %}\n\n{% block action-content %}\n  &lt;form method=\"post\" enctype=\"multipart/form-data\"&gt;\n    {% csrf_token %}\n    {{ form.as_p }}\n    &lt;button type=\"submit\"&gt;Upload&lt;/button&gt;\n  &lt;/form&gt;\n\n{% endblock %}\n</code></pre> <p><code>admin.py</code></p> <pre><code>class UploadForm(forms.Form):\n    docfile = forms.FileField( label='Select a file')\n\nclass MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin):\n\n    @button()\n    def upload(self, request):\n        context = self.get_common_context(request, title='Upload')\n        if request.method == 'POST':\n            form = UploadForm(request.POST, request.FILES)\n            if form.is_valid():\n                downloaded_file = request.FILES['docfile']\n                # process file\n                ...\n                ...\n                return redirect(admin_urlname(context['opts'], 'changelist') )\n        else:\n            form = UploadForm()\n        context['form'] = form\n        return TemplateResponse(request, 'admin_extra_buttons/upload.html', context)\n</code></pre>"},{"location":"api/button/","title":"@button()","text":"<p>This decorator transform any ModelAdmin method to a view and add a button to the Admin objects toolbar.</p> <p>Examples:</p> <pre><code>\nfrom admin_extra_buttons.api import ExtraButtonsMixin, button\n\n\nclass MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin):\n    @button()    \n    def refresh_all(self, request):\n        # your business logic here\n        ...\n        self.message_user(request, 'refresh called')\n        # do not return HttpResponse(), so user will be redirected to the original page\n\n    @button()\n    def scan(self, request):\n        return HttpResponse(\"Done\")  # return specific response\n\n    @button()\n    def scan(self, request):\n        if request.method == 'POST':\n            ....\n        else:\n            return TemplateResponse()\n\n</code></pre> <p>Note</p> <p>AEB try to understand if a button should appear in the <code>change_form</code> and/or in the <code>change_list</code> page. If the decorated method has only one argument (es. <code>def scan(self, request)</code>), the button will only be visible on the <code>change_list</code> page, if it contains more that one argumente (es. <code>def scan(self, request, pk)</code>) the button will be visible in the <code>change_form</code> page.</p>"},{"location":"api/button/#options","title":"Options","text":"change_form: <code>None</code> set to <code>True</code> do show the button on the <code>change_form</code> page   If set to <code>None</code> (default), use method signature to display the button  change_list: <code>None</code> set to <code>True</code> do show the button on the <code>change_list</code> page If set to <code>None</code> (default), use method signature to display the button disable_on_click: <code>True</code> automatically disable button on click() to prevent unintentional double processing disable_on_edit: <code>True</code> automatically disable button when any FORM in page is modified enabled: <code>True</code> bool or callable to set enable status html_attrs: <code>{}</code> Dictionary of html tags to use in button rendering. label: <code>decorated method name</code> button label visible: <code>True</code> bool or callable show/hide button <p>Note</p> <p><code>id</code> is automacally set if not provided,  <code>class</code> is updated/set based on <code>disable_on_click</code> and <code>disable_on_edit</code> values </p> label: <code>decorated method name</code> button label pattern: <code>&lt;function_name&gt;/&lt;path:arg1&gt;/&lt;path:arg2&gt;/....</code> url pattern to use for the url genaration. permission: <code>None</code> Django permission code needed to access the view and display the button"},{"location":"api/button/#examples","title":"Examples","text":""},{"location":"api/button/#simple","title":"Simple","text":"<p>Simplest usage. Display a button and create a view on <code>admin/mymodel/scan</code>.</p> <pre><code>@register(MyModel)\nclass MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin):\n\n    @button()\n    def scan(self, request):\n        pass\n</code></pre>"},{"location":"api/button/#check-permissions","title":"Check Permissions","text":"<p>Buttons with custom permission, one for <code>change_list</code> and other for <code>change_form</code></p> <pre><code>@register(MyModel)\nclass MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin):\n\n    @button(permission=lambda request, obj: request.user.is_superuser)\n    def delete_all(self, request):\n        pass\n\n    @button(permission='app.delete_mymodel)\n    def mark(self, request, pk):\n        obj = self.get_object(request, pk)\n        obj.mark = True\n        obj.save()\n</code></pre>"},{"location":"api/button/#fully-featured","title":"Fully featured","text":"<p>Buttons with custom permission, one for <code>change_list</code> and other for <code>change_form</code></p> <pre><code>@register(MyModel)\nclass MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin):\n\n    @button(permission=lambda request, obj: request.user.is_superuser,\n            html_attrs={'style': 'background-color:var(--button-bg)'},\n            label=_('Delete All Records'),\n            change_form=True\n            )\n    def delete_all(self, request):\n        pass\n\n    @button(permission=lambda request, obj: request.user.is_superuser,\n            html_attrs={'style': 'background-color:var(--button-bg)'},\n            enabled=lambda btn: btn.original.status == SUCCESS,\n            label=_('Delete All Records'),\n            change_form=True\n            )\n    def toggle(self, request, pk):\n        pass\n</code></pre>"},{"location":"api/choice/","title":"@choice()","text":"<p>This decorator allows \"grouping\" different <code>@view()</code> decorated methods under the same HTML <code>&lt;select&gt;</code> </p> <p>Examples:</p> <pre><code>from admin_extra_buttons.api import ExtraButtonsMixin, choice, view\n\nclass MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin):\n    @choice(change_list=True)\n    def menu1(self, button):\n        button.choices = [self.test1, self.test2]\n\n    @view()\n    def test1(self, request):\n        self.message_user(request, \"You have selected test1\")\n\n    @view()\n    def test2(self, request, pk):\n        context = self.get_common_context(request, pk)\n        self.message_user(request, f\"You have selected test22 on {context['original']}\")\n        return TemplateResponse(request, \"demo/test22.html\", context)\n</code></pre>"},{"location":"api/choice/#options","title":"Options","text":"change_form: <code>True</code> display the button on the <code>change_form</code> page change_list: <code>True</code> display  the button on the <code>change_list</code> page enabled: <code>True</code> bool or callable to set enable status html_attrs: <code>{}</code> Dictionary of html tags to use in button rendering label: <code>decorated method name</code> button label visible: <code>True</code> bool or callable show/hide button"},{"location":"api/choice/#attributes","title":"Attributes","text":"context TemplateContext from the Django template as at the moment of rendering"},{"location":"api/choice/#examples","title":"Examples","text":""},{"location":"api/choice/#complex-configuration","title":"Complex Configuration","text":"<pre><code>class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin):\n\n    @choice(label=\"Menu #1\",\n            change_list=False,\n            html_attrs={'target': '_new', 'style': 'background-color:var(--button-bg)'})\n    def menu1(self, button):\n        original = button.original\n        button.label = f\"Search '{original.name}' on Google\"\n        if button.requst.user.is_superuser: \n            button.choices = [self.feat1, self.feat2, self.feat3, self.feat4]\n        else:\n            button.choices = [self.feat1, self.feat2]\n\n    @view()\n    def feat1(self, request):\n        self.message_user(request, \"You have selected Feature #1\")\n\n    @view()\n    def feat2(self, request):\n        return TemplateResponse(request, \"demo/feat2.html\", context)\n\n    @view(permission=lambda request, obj: request.user.is_superuser)\n    def feat3(self, request):\n        return HttpResponse(\"You have selected Feature #3\")\n\n    @view(permission=lambda request, obj: request.user.is_superuser)\n    def feat3(self, request):\n        self.message_user(request, \"You have selected Feature #3\")\n</code></pre>"},{"location":"api/handlers/","title":"Handlers","text":"<p>Warning</p> <p>This is an internal API and should be used only for extend/customise core behaviours.</p>"},{"location":"api/handlers/#buttonhandler","title":"ButtonHandler","text":"<p>View handler for <code>@button</code> decorated views</p>"},{"location":"api/handlers/#linkhandler","title":"LinkHandler","text":"<p>View handler for <code>@link</code> decorated views</p>"},{"location":"api/handlers/#viewhandler","title":"ViewHandler","text":"<p>View handler for <code>@view</code> decorated views</p>"},{"location":"api/handlers/#viewbutton","title":"ViewButton","text":"<p>Button class for Django views based buttons </p>"},{"location":"api/handlers/#linkbutton","title":"LinkButton","text":"<p>Button class for links based buttons (buttons not linked to Django views)  </p>"},{"location":"api/handlers/#choicebutton","title":"ChoiceButton","text":"<p>Button class for choices buttons  </p>"},{"location":"api/link/","title":"@link()","text":"<p>Use this decorator if you want to create links to external  resources or if you already have the required view. </p> <p>Note</p> <p>@link() buttons by defaults are visible both on <code>change_list</code> and <code>change_form</code> pages</p> <p>Examples:</p> <pre><code>from admin_extra_buttons.api import ExtraButtonsMixin, link\n\nclass MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin):\n    @link(href=\"https://www.google.com/\", change_form=False)\n    def google(self, button):\n        pass\n\n    @link(href=None, change_list=False)\n    def search_on_google(self, button):\n        button.label = f\"Search '{button.original.name}' on Google\"\n        button.href = f\"https://www.google.com/?q={button.original.name}\"\n</code></pre>"},{"location":"api/link/#options","title":"Options","text":"change_form: <code>True</code> display the button on the <code>change_form</code> page change_list: <code>True</code> display  the button on the <code>change_list</code> page href: <code>\"\"\"</code> HTML <code>href</code> attribute value  enabled: <code>True</code> bool or callable to set enable status html_attrs: <code>{}</code> Dictionary of html tags to use in button rendering label: <code>decorated method name</code> button label visible: <code>True</code> bool or callable show/hide button"},{"location":"api/link/#attributes","title":"Attributes","text":"context TemplateContext from the Django template as at the moment of rendering"},{"location":"api/link/#examples","title":"Examples","text":""},{"location":"api/link/#dynamic-configuration","title":"Dynamic Configuration","text":"<pre><code>class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin):\n\n    @link(href=None, change_list=False)\n    def search_on_google(self, button):\n        button.label = f\"Search '{button.original.name}' on Google\"\n        button.href = f\"https://www.google.com/?q={original.name}\"\n</code></pre>"},{"location":"api/link/#fully-featured","title":"Fully featured","text":"<pre><code>class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin):\n\n@link(href=None, \n      change_list=False, \n      html_attrs={'target': '_new', 'style': 'background-color:var(--button-bg)'})\ndef search_on_google(self, button):\n    button.label = f\"Search '{button.original.name}' on Google\"\n    button.href = f\"https://www.google.com/?q={button.original.name}\"\n</code></pre>"},{"location":"api/mixin/","title":"ExtraButtonMixin","text":"<p>Mixin to use with ModelAdmin to properly handle button decorators</p>"},{"location":"api/mixin/#attributes","title":"Attributes","text":"change_list_template Default <code>admin_extra_buttons/change_list.html</code> change_form_template Default <code>admin_extra_buttons/change_form.html</code>"},{"location":"api/mixin/#methods","title":"Methods","text":"get_changeform_buttons(context) Return the list of buttons that will be displayed on the change form page. Default implementation returns all the buttons with <code>change_form=True</code> or <code>change_form=None</code> get_changelist_buttons(context) Return the list of buttons that will be displayed on the changelist page. Default implementation returns all the buttons with <code>change_list=True</code> or <code>change_list=None</code> get_action_buttons(context) Return the list of buttons that will be displayed on the extra action page. get_common_context() This method returns a django template Context filled with the common values  that can be useful when create custom views that render templates. (@see Build two steps action) message_error_to_user() Shortcut to display message on Exception"},{"location":"api/view/","title":"@view()","text":"<p>Use this decorator to add views to any ModelAdmin. This decorator will not create any button.</p>"},{"location":"api/view/#options","title":"Options","text":"pattern: <code>&lt;function_name&gt;/&lt;path:arg1&gt;/&lt;path:arg2&gt;/....</code> url pattern to use for the url generation.  permission: <code>None</code> Django permission code needed to access the view and display the button. Can be a callable login_required: <code>True</code> Set to False to allow access to  anonymous users  http_basic_auth: <code>False</code> Enable Basic Authentication for this view"},{"location":"api/view/#examples","title":"Examples","text":""},{"location":"api/view/#simple","title":"Simple","text":"<pre><code>@register(MyModel)\nclass MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin):\n\n    @view()\n    def sele(self, request):\n</code></pre>"},{"location":"api/view/#http-basic-authentication","title":"HTTP Basic Authentication","text":"<pre><code>@register(MyModel)\nclass MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin):\n\n    @view(http_basic_auth=True)\n    def api4(self, request):\n        return HttpResponse(\"Basic Authentication allowed\")\n</code></pre>"}]}